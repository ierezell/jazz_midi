import{M as h}from"./M4Hk-hxN.js";class p{constructor(e={}){this.options=e,this.options={velocity:100,channel:0,...e}}listeners=[];activeNotes=new Set;addEventListener(e,t){e==="midimessage"&&this.listeners.push(t)}removeEventListener(e,t){if(e==="midimessage"){const s=this.listeners.indexOf(t);s>-1&&this.listeners.splice(s,1)}}pressKey(e,t=this.options.velocity||100){if(this.activeNotes.has(e))return;this.activeNotes.add(e);const s=this.createMidiMessage(144,e,t);this.dispatchMidiEvent(s)}releaseKey(e){if(!this.activeNotes.has(e))return;this.activeNotes.delete(e);const t=this.createMidiMessage(128,e,0);this.dispatchMidiEvent(t)}releaseAllKeys(){for(const e of this.activeNotes)this.releaseKey(e)}getActiveNotes(){return Array.from(this.activeNotes)}playChord(e,t=this.options.velocity||100){e.forEach(s=>this.pressKey(s,t))}createMidiMessage(e,t,s){return new Uint8Array([e|(this.options.channel||0),t,s])}dispatchMidiEvent(e){const t={data:e,timeStamp:performance.now(),type:"midimessage"};this.listeners.forEach(s=>s(t))}}function m(a="Virtual MIDI Keyboard"){const e=new p,t={id:"virtual-midi-input",manufacturer:"Virtual",name:a,type:"input",version:"1.0.0",state:"connected",connection:"open",onmidimessage:null,onstatechange:null,addEventListener:e.addEventListener.bind(e),removeEventListener:e.removeEventListener.bind(e),dispatchEvent:()=>!1,open:()=>Promise.resolve(t),close:()=>Promise.resolve(t),_virtualInput:e};return Object.defineProperty(t,"onmidimessage",{get(){return this._onmidimessage},set(i){this._onmidimessage=i,i&&e.addEventListener("midimessage",i)}}),{inputs:new Map([["virtual-midi-input",t]]),outputs:new Map,sysexEnabled:!1,onstatechange:null,addEventListener:()=>{},removeEventListener:()=>{},dispatchEvent:()=>!1,getVirtualInput:()=>e}}const c={z:72,x:74,c:76,v:77,b:79,n:81,m:83,",":84,".":86,"/":88,s:73,d:75,g:78,h:80,j:82,l:85,";":87,"'":89,q:84,w:86,e:88,r:89,t:91,y:93,u:95,i:96,o:98,p:100,"[":101,"]":103,2:73,3:75,5:78,6:80,7:82,9:85,0:87,"=":90};function d(a,e=!1){const t=new Set;function s(r){if(!e)return;const i=r.key.toLowerCase();if(console.debug("Key pressed:",i),c[i]&&!t.has(i)){t.add(i);const o=c[i];console.debug(`Pressing MIDI note ${o} for key '${i}'`),a.pressKey(o),r.preventDefault()}}function n(r){if(!e)return;const i=r.key.toLowerCase();if(c[i]&&t.has(i)){t.delete(i);const o=c[i];console.debug(`Releasing MIDI note ${o} for key '${i}'`),a.releaseKey(o),r.preventDefault()}}return e?console.debug("Virtual keyboard input setup complete. Available keys:",Object.keys(c)):console.debug("Virtual keyboard input setup (keyboard disabled)"),document.addEventListener("keydown",s),document.addEventListener("keyup",n),()=>{console.debug("Virtual keyboard input cleanup"),document.removeEventListener("keydown",s),document.removeEventListener("keyup",n)}}class f{midiAccess=null;virtualMidi=null;keyboardCleanup=null;eventHandlers={};errorCallbacks=[];debugMode=!1;constructor(){}async initialize(){try{return await this.connectMIDI(),!0}catch(e){return this.handleError(e),!1}}async connectMIDI(){try{if(this.midiAccess=await this.safeRequestMidiAccess({sysex:!1}),!this.midiAccess)throw new Error("Failed to obtain MIDI access");return this.safeSetupMidiCallback(this.midiAccess,this.handleMIDIMessage.bind(this),this.handleError.bind(this)),console.debug("MIDI Manager: Connected to physical MIDI devices"),!0}catch(e){return this.handleError(e),!1}}async safeRequestMidiAccess(e){try{if(!navigator.requestMIDIAccess)return console.warn("Web MIDI API not supported in this browser"),null;const t=await navigator.requestMIDIAccess(e||{sysex:!1});return console.debug("MIDI Access obtained successfully"),t}catch(t){return console.error("Failed to obtain MIDI access:",t),null}}safeSetupMidiCallback(e,t,s){try{e.inputs.forEach(n=>{const r=`Input port [type:'${n.type}'] id:'${n.id}' manufacturer:'${n.manufacturer}' name:'${n.name}' version:'${n.version}'`;console.debug(`Setting up MIDI input: ${r}`),n.onmidimessage=i=>{try{t(i)}catch(o){console.error("Error in MIDI message callback:",o),s&&s(o)}}}),e.onstatechange=n=>{const r=n.port;console.debug(`MIDI port state changed: ${r.name} is now ${r.state}`)}}catch(n){console.error("Error setting up MIDI callback:",n),s&&s(n)}}setupVirtualKeyboard(){try{const e=m("Virtual Debug Keyboard");this.virtualMidi=e.getVirtualInput(),this.keyboardCleanup=d(this.virtualMidi,this.debugMode);const t=Array.from(e.inputs.values())[0];t&&(t.onmidimessage=this.handleMIDIMessage.bind(this)),console.debug("MIDI Manager: Virtual keyboard enabled")}catch(e){this.handleError(e)}}setDebugMode(e){this.debugMode=e,this.virtualMidi&&(this.keyboardCleanup&&(this.keyboardCleanup(),this.keyboardCleanup=null),this.keyboardCleanup=d(this.virtualMidi,this.debugMode),console.debug(`MIDI Manager: Debug mode ${e?"enabled":"disabled"}`))}getVirtualMidi(){return this.virtualMidi}safeGetMidiNote(e){try{if(!e.data||e.data.length<3)return console.warn("Invalid MIDI message data"),null;const[t,s,n]=e.data,r=t&240,i=t&15;if(r!==144&&r!==128)return null;if(s<24||s>127)return console.warn(`MIDI note ${s} out of valid range (24-127)`),null;const o=s,l=h[o];if(!l)return console.error(`No note name found for MIDI note ${o}`),null;const u=r===144&&n>0;return{noteNumber:o,type:u?"on":"off",noteFullName:l,noteName:l.slice(0,-1),velocity:n||0,timestamp:e.timeStamp||performance.now(),channel:i}}catch(t){return console.error("Error parsing MIDI message:",t),null}}handleMIDIMessage(e){try{const t=this.safeGetMidiNote(e);if(!t)return;t.type==="on"&&this.eventHandlers.onNoteOn?this.eventHandlers.onNoteOn(t):t.type==="off"&&this.eventHandlers.onNoteOff&&this.eventHandlers.onNoteOff(t)}catch(t){this.handleError(t)}}setEventHandlers(e){this.eventHandlers={...this.eventHandlers,...e}}handleError(e){console.error("MIDI Manager Error:",e),this.errorCallbacks.forEach(t=>{try{t(e)}catch(s){console.error("Error in error callback:",s)}}),this.eventHandlers.onError&&this.eventHandlers.onError(e)}getMIDIDevices(){return this.midiAccess?{inputs:Array.from(this.midiAccess.inputs.values()),outputs:Array.from(this.midiAccess.outputs.values())}:{inputs:[],outputs:[]}}cleanup(){this.keyboardCleanup&&(this.keyboardCleanup(),this.keyboardCleanup=null),this.virtualMidi&&(this.virtualMidi.releaseAllKeys(),this.virtualMidi=null),this.midiAccess&&(this.midiAccess.inputs.forEach(e=>{e.onmidimessage=null}),this.midiAccess.onstatechange=null),this.eventHandlers={},this.errorCallbacks=[],console.debug("MIDI Manager: Cleaned up all connections")}}const y=new f;export{y as m};
