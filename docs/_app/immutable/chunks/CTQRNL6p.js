class a{static instance;storageKey="jazz-midi-user-stats";profileKey="jazz-midi-user-profile";listeners=[];profile;statistics;constructor(){this.profile=this.loadProfile(),this.statistics=this.loadStatistics()}static getInstance(){return a.instance||(a.instance=new a),a.instance}getProfile(){return{...this.profile}}updateProfile(e){this.profile={...this.profile,...e,lastActivity:new Date},this.saveProfile()}getStatistics(){return{...this.statistics}}recordExerciseResult(e){this.updateOverallStats(e),this.updateTypeStats(e),this.updateMastery(e),this.updateStreak(e),this.checkAchievements(),this.profile.lastActivity=new Date,this.profile.experiencePoints+=this.calculateExperiencePoints(e),this.profile.level=this.calculateLevel(this.profile.experiencePoints),this.saveStatistics(),this.saveProfile(),this.notifyListeners()}getChordMastery(e,t){return this.statistics.masteredChords.find(s=>s.root===e&&s.chordType===t)||null}getScaleMastery(e,t){return this.statistics.masteredScales.find(s=>s.root===e&&s.scaleType===t)||null}getProgressionMastery(e,t){return this.statistics.masteredProgressions.find(s=>s.key===e&&s.progressionType===t)||null}getAchievements(){return this.getDefaultAchievements().map(e=>{const t=this.calculateAchievementProgress(e);return{...e,progress:t,unlockedAt:t>=100?this.profile.lastActivity:void 0}})}startSession(){typeof localStorage<"u"&&localStorage.setItem("jazz-midi-session-start",Date.now().toString())}endSession(){if(typeof localStorage<"u"){const e=localStorage.getItem("jazz-midi-session-start");if(e){const t=(Date.now()-parseInt(e))/6e4;this.recordSession(t),localStorage.removeItem("jazz-midi-session-start")}}}exportData(){return JSON.stringify({profile:this.profile,statistics:this.statistics,exportDate:new Date,version:"1.0"},null,2)}importData(e){try{const t=JSON.parse(e);if(t.profile&&t.statistics)return this.profile={...this.profile,...t.profile},this.statistics={...this.statistics,...t.statistics},this.saveProfile(),this.saveStatistics(),this.notifyListeners(),!0}catch(t){console.error("Failed to import user data:",t)}return!1}subscribe(e){return this.listeners.push(e),()=>{const t=this.listeners.indexOf(e);t>-1&&this.listeners.splice(t,1)}}loadProfile(){try{if(typeof localStorage<"u"){const e=localStorage.getItem(this.profileKey);if(e){const t=JSON.parse(e);return{...t,createdAt:new Date(t.createdAt),lastActivity:new Date(t.lastActivity)}}}}catch(e){console.warn("Failed to load user profile:",e)}return this.createDefaultProfile()}loadStatistics(){try{if(typeof localStorage<"u"){const e=localStorage.getItem(this.storageKey);if(e){const t=JSON.parse(e);return{...t,masteredChords:t.masteredChords?.map(s=>({...s,lastPracticed:new Date(s.lastPracticed)}))||[],masteredScales:t.masteredScales?.map(s=>({...s,lastPracticed:new Date(s.lastPracticed)}))||[],masteredProgressions:t.masteredProgressions?.map(s=>({...s,lastPracticed:new Date(s.lastPracticed)}))||[],recentSessions:t.recentSessions?.map(s=>({...s,date:new Date(s.date)}))||[]}}}}catch(e){console.warn("Failed to load user statistics:",e)}return this.createDefaultStatistics()}createDefaultProfile(){return{id:crypto.randomUUID(),name:"Jazz Student",createdAt:new Date,lastActivity:new Date,totalPracticeTime:0,level:1,experiencePoints:0}}createDefaultStatistics(){return{totalExercises:0,completedExercises:0,averageAccuracy:0,averageScore:0,totalPracticeTime:0,currentStreak:0,longestStreak:0,noteProgress:new Map,chordStats:this.createDefaultTypeStats(),scaleStats:this.createDefaultTypeStats(),progressionStats:this.createDefaultTypeStats(),masteredChords:[],masteredScales:[],masteredProgressions:[],recentSessions:[],improvementTrend:0}}createDefaultTypeStats(){return{attempted:0,completed:0,averageAccuracy:0,averageScore:0,bestScore:0,totalTime:0,masteryLevel:"beginner"}}updateOverallStats(e){this.statistics.totalExercises++,e.success&&this.statistics.completedExercises++;const t=this.statistics.totalExercises;this.statistics.averageAccuracy=(this.statistics.averageAccuracy*(t-1)+e.accuracy)/t,this.statistics.averageScore=(this.statistics.averageScore*(t-1)+e.score)/t,this.statistics.totalPracticeTime+=e.timeElapsed/(1e3*60)}updateTypeStats(e){const t=this.getTypeStats(e.exerciseType);t.attempted++,e.success&&t.completed++;const s=t.attempted;t.averageAccuracy=(t.averageAccuracy*(s-1)+e.accuracy)/s,t.averageScore=(t.averageScore*(s-1)+e.score)/s,t.bestScore=Math.max(t.bestScore,e.score),t.totalTime+=e.timeElapsed/(1e3*60),t.masteryLevel=this.calculateMasteryLevel(t)}updateMastery(e){}updateStreak(e){e.success&&e.accuracy>=80?(this.statistics.currentStreak++,this.statistics.longestStreak=Math.max(this.statistics.longestStreak,this.statistics.currentStreak)):this.statistics.currentStreak=0}getTypeStats(e){switch(e){case"chord":return this.statistics.chordStats;case"scale":return this.statistics.scaleStats;case"progression":return this.statistics.progressionStats}}calculateMasteryLevel(e){return e.averageScore>=90&&e.attempted>=100?"expert":e.averageScore>=80&&e.attempted>=50?"advanced":e.averageScore>=70&&e.attempted>=20?"intermediate":"beginner"}calculateExperiencePoints(e){let t=e.score;return e.success&&(t+=10),e.accuracy>=100&&(t+=20),e.mistakes===0&&(t+=15),t}calculateLevel(e){return Math.floor(e/1e3)+1}recordSession(e){const t={date:new Date,duration:e,exercisesCompleted:0,averageScore:0,topCategory:"chords",improvements:[]};this.statistics.recentSessions.unshift(t),this.statistics.recentSessions.length>10&&this.statistics.recentSessions.pop()}getDefaultAchievements(){return[{id:"first-chord",name:"First Chord",description:"Complete your first chord exercise",icon:"🎵",progress:0,requirements:[{type:"exercise_count",target:1,current:0}]},{id:"chord-master",name:"Chord Master",description:"Complete 100 chord exercises",icon:"🎼",progress:0,requirements:[{type:"exercise_count",target:100,current:0}]},{id:"perfect-accuracy",name:"Perfect Performance",description:"Achieve 100% accuracy in an exercise",icon:"⭐",progress:0,requirements:[{type:"accuracy",target:100,current:0}]},{id:"practice-streak",name:"Practice Makes Perfect",description:"Maintain a 7-day practice streak",icon:"🔥",progress:0,requirements:[{type:"streak",target:7,current:0}]}]}calculateAchievementProgress(e){switch(e.id){case"first-chord":return this.statistics.chordStats.completed>0?100:0;case"chord-master":return Math.min(100,this.statistics.chordStats.completed/100*100);case"perfect-accuracy":return this.statistics.averageAccuracy>=100?100:0;case"practice-streak":return Math.min(100,this.statistics.currentStreak/7*100);default:return 0}}checkAchievements(){}updateNoteProgress(e,t,s,i,o,l){const n=this.generateProgressKey(e,t,s);let r=this.statistics.noteProgress.get(n);r||(r={note:e,exerciseType:t,chordType:s,attempts:0,successes:0,averageAccuracy:0,bestTime:1/0,lastPracticed:new Date,masteryLevel:"beginner"}),r.attempts++,i&&r.successes++,r.averageAccuracy=(r.averageAccuracy*(r.attempts-1)+l)/r.attempts,o<r.bestTime&&(r.bestTime=o),r.lastPracticed=new Date;const c=r.successes/r.attempts;c>=.95&&r.averageAccuracy>=95?r.masteryLevel="mastered":c>=.8&&r.averageAccuracy>=80?r.masteryLevel="advanced":c>=.6&&r.averageAccuracy>=60?r.masteryLevel="intermediate":r.masteryLevel="beginner",this.statistics.noteProgress.set(n,r),this.saveStatistics()}getNoteProgress(e,t,s){const i=this.generateProgressKey(e,t,s);return this.statistics.noteProgress.get(i)}getProgressByType(e){return Array.from(this.statistics.noteProgress.values()).filter(t=>t.exerciseType===e)}generateProgressKey(e,t,s){return s?`${e}-${t}-${s}`:`${e}-${t}`}saveProfile(){try{typeof localStorage<"u"&&localStorage.setItem(this.profileKey,JSON.stringify(this.profile))}catch(e){console.warn("Failed to save user profile:",e)}}saveStatistics(){try{typeof localStorage<"u"&&localStorage.setItem(this.storageKey,JSON.stringify(this.statistics))}catch(e){console.warn("Failed to save user statistics:",e)}}notifyListeners(){this.listeners.forEach(e=>{try{e(this.statistics)}catch(t){console.error("Error in stats listener:",t)}})}}const d=a.getInstance();export{d as u};
