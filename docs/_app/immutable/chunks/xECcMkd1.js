import{c as d,N as u,A as g}from"./KCvTrXcA.js";const a={midi:{autoConnect:!0,virtualKeyboard:{enabled:!0,layout:"piano",size:"normal"},latency:{compensation:0,monitoring:!1}},audio:{enabled:!0,volume:{master:.8,feedback:.6,metronome:.5},sounds:{success:"/sounds/ok.mp3",error:"/sounds/error.mp3",metronome:"/sounds/metronome.mp3"}},ui:{theme:"auto",layout:"comfortable",animations:!0,accessibility:{highContrast:!1,reducedMotion:!1,screenReader:!1},keyboard:{showLabels:!1,highlightPressed:!0,size:"medium",octaves:2,startOctave:4}},exercise:{errorThreshold:{showNoteNames:3,showKeyboard:6},autoProgress:!1,showHints:!0,defaultKey:"C",defaultTempo:120}};class f{config;storageKey="jazz-midi-config";listeners=[];constructor(){this.config=this.loadConfig()}loadConfig(){try{if(typeof localStorage<"u"){const e=localStorage.getItem(this.storageKey);if(e){const t=JSON.parse(e);return this.mergeWithDefaults(t)}}}catch(e){console.warn("Failed to load config from localStorage:",e)}return{...a}}mergeWithDefaults(e){return{midi:{...a.midi,...e.midi},audio:{...a.audio,...e.audio},ui:{...a.ui,...e.ui},exercise:{...a.exercise,...e.exercise}}}saveConfig(){try{typeof localStorage<"u"&&localStorage.setItem(this.storageKey,JSON.stringify(this.config))}catch(e){console.warn("Failed to save config to localStorage:",e)}}getConfig(){return{...this.config}}getSection(e){return{...this.config[e]}}updateConfig(e){this.config={...this.config,...e},this.saveConfig(),this.notifyListeners()}updateSection(e,t){this.config[e]={...this.config[e],...t},this.saveConfig(),this.notifyListeners()}resetToDefaults(){this.config={...a},this.saveConfig(),this.notifyListeners()}resetSection(e){this.config[e]={...a[e]},this.saveConfig(),this.notifyListeners()}subscribe(e){return this.listeners.push(e),()=>{const t=this.listeners.indexOf(e);t>-1&&this.listeners.splice(t,1)}}notifyListeners(){this.listeners.forEach(e=>{try{e(this.config)}catch(t){console.error("Error in config listener:",t)}})}exportConfig(){return JSON.stringify(this.config,null,2)}importConfig(e){try{const t=JSON.parse(e),i=this.mergeWithDefaults(t);return this.config=i,this.saveConfig(),this.notifyListeners(),!0}catch(t){return console.error("Failed to import config:",t),!1}}getSchema(){return{midi:{autoConnect:"boolean",virtualKeyboard:{enabled:"boolean",layout:["piano","chromatic","isomorphic"],size:["compact","normal","large"]},latency:{compensation:"number",monitoring:"boolean"}},audio:{enabled:"boolean",volume:{master:"number(0-1)",feedback:"number(0-1)",metronome:"number(0-1)"}},ui:{theme:["light","dark","auto"],layout:["compact","comfortable","spacious"],animations:"boolean"},exercise:{errorThreshold:{showNoteNames:"number",showKeyboard:"number"},autoProgress:"boolean",showHints:"boolean"}}}}const v=new f;class y{static getChordNotes(e,t,i=0,o="close",r=4){const s=e+r,c=u[s],n=d(c,t,i);let l=[n.root,n.third,n.fifth,n.seventh].filter(m=>m!==void 0);return this.applyVoicing(l,o)}static applyVoicing(e,t){switch(t){case"close":return e;case"open":return e.map((i,o)=>o>1?i+12:i);case"drop2":if(e.length>=3){const i=[...e];return i[e.length-2]=i[e.length-2]-12,i.sort((o,r)=>o-r)}return e;case"drop3":if(e.length>=4){const i=[...e];return i[e.length-3]=i[e.length-3]-12,i.sort((o,r)=>o-r)}return e;case"shell":return e.filter((i,o)=>o!==2);default:return e}}static getChordSymbol(e,t){return e+{major:"",minor:"m",maj7:"maj7",min7:"m7",7:"7",dom7:"7",diminished:"°",dim7:"°7","half-dim7":"ø",augmented:"+",sus2:"sus2",sus4:"sus4"}[t]}static getChordQuality(e){return{major:"Major Triad",minor:"Minor Triad",maj7:"Major Seventh",min7:"Minor Seventh",7:"Dominant Seventh",dom7:"Dominant Seventh",diminished:"Diminished Triad",dim7:"Diminished Seventh","half-dim7":"Half-diminished Seventh",augmented:"Augmented",sus2:"Suspended Second",sus4:"Suspended Fourth"}[e]}static getJazzProgressions(){return{"ii-V-I":["min7","7","maj7"],"vi-ii-V-I":["min7","min7","7","maj7"],"I-vi-ii-V":["maj7","min7","min7","7"],"iii-vi-ii-V":["min7","min7","min7","7"],"Giant Steps":["maj7","7","maj7","7"]}}static createChordToneMapping(e,t,i,o){const r=d(t,i,o);return{notes:[r.root,r.third,r.fifth,r.seventh].filter(c=>c!==void 0),roles:["root","third","fifth","seventh"],type:i,inversion:o}}}class p{static calculateOptimalRange(e,t=2,i=7){if(e.length===0)return{middleC:60,octaves:t};const o=Math.min(...e),r=Math.max(...e),s=Math.floor((o-12)/12)*12+12,n=Math.ceil((r+12)/12)*12-s,l=Math.max(t,Math.min(i,Math.ceil(n/12))),m=s+Math.floor(l*12/2)-6;return{middleC:Math.max(24,m),octaves:l}}static getKeyboardLayouts(){return{piano:{whiteKeyWidth:30,blackKeyWidth:20,whiteKeyHeight:120,blackKeyHeight:80},compact:{whiteKeyWidth:20,blackKeyWidth:14,whiteKeyHeight:80,blackKeyHeight:55},large:{whiteKeyWidth:40,blackKeyWidth:26,whiteKeyHeight:150,blackKeyHeight:100}}}}class b{static isValidMidiNote(e){return e>=24&&e<=128&&Number.isInteger(e)}static isValidNote(e){return g.includes(e)}static isValidChordType(e){return["major","minor","maj7","min7","7","dom7","diminished","dim7","half-dim7","augmented","sus2","sus4"].includes(e)}static arraysEqual(e,t){if(e.length!==t.length)return!1;const i=[...e].sort(),o=[...t].sort();return i.every((r,s)=>r===o[s])}static isSequential(e){for(let t=1;t<e.length;t++)if(e[t]<=e[t-1])return!1;return!0}}const S={Chord:y,Keyboard:p,Validation:b};export{S as M,v as c};
